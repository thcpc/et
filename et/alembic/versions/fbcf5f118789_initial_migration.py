# coding: utf-8
"""Initial migration

Revision ID: fbcf5f118789
Revises: 
Create Date: 2025-08-07 18:24:42.814856

"""
from typing import Sequence, Union

from sqlalchemy.orm.session import Session

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fbcf5f118789'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('et_admin_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('password', sa.String(length=50), nullable=False),
    sa.Column('token', sa.String(length=200), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('et_document_docs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=1000), nullable=True),
    sa.Column('author', sa.String(length=50), nullable=True),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_label_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=20), nullable=True),
    sa.Column('category_type', sa.String(length=10), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_label_on',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('on', sa.String(length=30), nullable=True),
    sa.Column('on_id', sa.Integer(), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_admin_user_fingerprints',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('finger_print', sa.String(length=100), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['et_admin_users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_doc_audits',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=True),
    sa.Column('when', sa.DateTime(), nullable=True),
    sa.Column('who', sa.String(length=100), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=True),
    sa.Column('action_object', sa.String(length=100), nullable=True),
    sa.Column('prepositions', sa.String(length=10), nullable=True),
    sa.Column('action_target', sa.String(length=100), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['et_document_docs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_labels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['et_document_label_categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_pages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=1000), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('document_id', sa.Integer(), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['et_document_docs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_snapshot_docs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=True),
    sa.Column('labels', sa.String(length=1000), nullable=True),
    sa.Column('description', sa.String(length=1000), nullable=False),
    sa.Column('name', sa.String(length=70), nullable=False),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['et_document_docs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('business_status', sa.Integer(), nullable=True),
    sa.Column('task_type', sa.String(length=20), nullable=True),
    sa.Column('document_id', sa.Integer(), nullable=True),
    sa.Column('snapshot_id', sa.Integer(), nullable=True),
    sa.Column('create_by', sa.Integer(), nullable=True),
    sa.Column('comment', sa.String(length=500), nullable=True),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('prev_id', sa.Integer(), nullable=True),
    sa.Column('next_id', sa.Integer(), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['et_document_docs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_doc_labels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=True),
    sa.Column('label_id', sa.Integer(), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['et_document_docs.id'], ),
    sa.ForeignKeyConstraint(['label_id'], ['et_document_labels.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_paragraphs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('paragraph_type', sa.String(length=15), nullable=True),
    sa.Column('page_id', sa.Integer(), nullable=True),
    sa.Column('blockno', sa.String(length=50), nullable=True),
    sa.Column('fileno', sa.String(length=50), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['page_id'], ['et_document_pages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_snapshot_pages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('snapshot_document_id', sa.Integer(), nullable=True),
    sa.Column('page_name', sa.String(length=100), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['snapshot_document_id'], ['et_document_snapshot_docs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_task_assignees',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['et_document_tasks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_his_contents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('blockno', sa.String(length=50), nullable=True),
    sa.Column('fileno', sa.String(length=50), nullable=True),
    sa.Column('paragraph_id', sa.Integer(), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['paragraph_id'], ['et_document_paragraphs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('et_document_snapshot_paragraphs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('snapshot_page_id', sa.Integer(), nullable=True),
    sa.Column('blockno', sa.String(length=50), nullable=True),
    sa.Column('fileno', sa.String(length=50), nullable=True),
    sa.Column('create_dt', sa.DateTime(), nullable=True),
    sa.Column('modify_dt', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['snapshot_page_id'], ['et_document_snapshot_pages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
    seed_data()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('et_document_snapshot_paragraphs')
    op.drop_table('et_document_his_contents')
    op.drop_table('et_document_task_assignees')
    op.drop_table('et_document_snapshot_pages')
    op.drop_table('et_document_paragraphs')
    op.drop_table('et_document_doc_labels')
    op.drop_table('et_document_tasks')
    op.drop_table('et_document_snapshot_docs')
    op.drop_table('et_document_pages')
    op.drop_table('et_document_labels')
    op.drop_table('et_document_doc_audits')
    op.drop_table('et_admin_user_fingerprints')
    op.drop_table('et_document_label_on')
    op.drop_table('et_document_label_categories')
    op.drop_table('et_document_docs')
    op.drop_table('et_admin_users')
    # ### end Alembic commands ###


from et.models import LabelCategoryBase


def seed_data():
    bind = op.get_bind()
    session = Session(bind=bind)


    if not session.query(LabelCategoryBase).first():
            session.add(LabelCategoryBase(name='EDC', category_type='business'))
            session.add(LabelCategoryBase(name='CRF DESIGN', category_type='business'))
            session.add(LabelCategoryBase(name='PV', category_type='business'))
            session.add(LabelCategoryBase(name='CTMS', category_type='business'))
            session.add(LabelCategoryBase(name='eTMF', category_type='business'))
            session.add(LabelCategoryBase(name='ADMIN', category_type='business'))
            session.add(LabelCategoryBase(name='ProCheck', category_type='business'))
            session.add(LabelCategoryBase(name='Medical Coding', category_type='business'))
            session.add(LabelCategoryBase(name='Medical Image', category_type='business'))
            session.add(LabelCategoryBase(name='IRC', category_type='business'))
            session.add(LabelCategoryBase(name='其它', category_type='business'))
            session.add(LabelCategoryBase(name='回归用例', category_type='business'))
            session.add(LabelCategoryBase(name='自动化用例', category_type='business'))
            session.commit()
            print("插入数据成功")
    else:
            print("插入数据失败")